var scene, scene2, renderer, camera, controls, groups, visibility, group, insetwidth, insetheight, size, travel;

const extrudeSettings = {
    steps: 2,
    depth: 30,
    bevelEnabled: false
};

const path = [[-20, -300, 20],[-20, -299, 20],[-20, -298, 20],[-20, -297, 20],[-20, -296, 20],[-20, -295, 20],[-20, -294, 20],[-20, -293, 20],[-20, -292, 20],[-20, -291, 20],[-20, -290, 20],[-20, -289, 20],[-20, -288, 20],[-20, -287, 20],[-20, -286, 20],[-20, -285, 20],[-20, -284, 20],[-20, -283, 20],[-20, -282, 20],[-20, -281, 20],[-20, -280, 20],[-20, -279, 20],[-20, -278, 20],[-20, -277, 20],[-20, -276, 20],[-20, -275, 20],[-20, -274, 20],[-20, -273, 20],[-20, -272, 20],[-20, -271, 20],[-20, -270, 20],[-20, -269, 20],[-20, -268, 20],[-20, -267, 20],[-20, -266, 20],[-20, -265, 20],[-20, -264, 20],[-20, -263, 20],[-20, -262, 20],[-20, -261, 20],[-20, -260, 20],[-20, -259, 20],[-20, -258, 20],[-20, -257, 20],[-20, -256, 20],[-20, -255, 20],[-20, -254, 20],[-20, -253, 20],[-20, -252, 20],[-20, -251, 20],
[-20, -250, 20],[-20, -249, 20],[-20, -248, 20],[-20, -247, 20],[-20, -246, 20],[-20, -245, 20],[-20, -244, 20],[-20, -243, 20],[-20, -242, 20],[-20, -241, 20],[-20, -240, 20],[-20, -239, 20],[-20, -238, 20],[-20, -237, 20],[-20, -236, 20],[-20, -235, 20],[-20, -234, 20],[-20, -233, 20],[-20, -232, 20],[-20, -231, 20],[-20, -230, 20],[-20, -229, 20],[-20, -228, 20],[-20, -227, 20],[-20, -226, 20],[-20, -225, 20],[-20, -224, 20],[-20, -223, 20],[-20, -222, 20],[-20, -221, 20],[-20, -220, 20],[-20, -219, 20],[-20, -218, 20],[-20, -217, 20],[-20, -216, 20],[-20, -215, 20],[-20, -214, 20],[-20, -213, 20],[-20, -212, 20],[-20, -211, 20],[-20, -210, 20],[-20, -209, 20],[-20, -208, 20],[-20, -207, 20],[-20, -206, 20],[-20, -205, 20],[-20, -204, 20],[-20, -203, 20],[-20, -202, 20],[-20, -201, 20],
[-20, -200, 20],[-20, -199, 20],[-20, -198, 20],[-20, -197, 20],[-20, -196, 20],[-20, -195, 20],[-20, -194, 20],[-20, -193, 20],[-20, -192, 20],[-20, -191, 20],[-20, -190, 20],[-20, -189, 20],[-20, -188, 20],[-20, -187, 20],[-20, -186, 20],[-20, -185, 20],[-20, -184, 20],[-20, -183, 20],[-20, -182, 20],[-20, -181, 20],[-20, -180, 20],[-20, -179, 20],[-20, -178, 20],[-20, -177, 20],[-20, -176, 20],[-20, -175, 20],[-20, -174, 20],[-20, -173, 20],[-20, -172, 20],[-20, -171, 20],[-20, -170, 20],[-20, -169, 20],[-20, -168, 20],[-20, -167, 20],[-20, -166, 20],[-20, -165, 20],[-20, -164, 20],[-20, -163, 20],[-20, -162, 20],[-20, -161, 20],[-20, -160, 20],[-20, -159, 20],[-20, -158, 20],[-20, -157, 20],[-20, -156, 20],[-20, -155, 20],[-20, -154, 20],[-20, -153, 20],[-20, -152, 20],[-20, -151, 20],
[-20, -150, 20],[-20, -149, 20],[-20, -148, 20],[-20, -147, 20],[-20, -146, 20],[-20, -145, 20],[-20, -144, 20],[-20, -143, 20],[-20, -142, 20],[-20, -141, 20],[-20, -140, 20],[-20, -139, 20],[-20, -138, 20],[-20, -137, 20],[-20, -136, 20],[-20, -135, 20],[-20, -134, 20],[-20, -133, 20],[-20, -132, 20],[-20, -131, 20],[-20, -130, 20],[-20, -129, 20],[-20, -128, 20],[-20, -127, 20],[-20, -126, 20],[-20, -125, 20],[-20, -124, 20],[-20, -123, 20],[-20, -122, 20],[-20, -121, 20],[-20, -120, 20],[-20, -119, 20],[-20, -118, 20],[-20, -117, 20],[-20, -116, 20],[-20, -115, 20],[-20, -114, 20],[-20, -113, 20],[-20, -112, 20],[-20, -111, 20],[-20, -110, 20],[-20, -109, 20],[-20, -108, 20],[-20, -107, 20],[-20, -106, 20],[-20, -105, 20],[-20, -104, 20],[-20, -103, 20],[-20, -102, 20],[-20, -101, 20],
[-20, -100, 20],[-20, -99, 20],[-20, -98, 20],[-20, -97, 20],[-20, -96, 20],[-20, -95, 20],[-20, -94, 20],[-20, -93, 20],[-20, -92, 20],[-20, -91, 20],[-20, -90, 20],[-20, -89, 20],[-20, -88, 20],[-20, -87, 20],[-20, -86, 20],[-20, -85, 20],[-20, -84, 20],[-20, -83, 20],[-20, -82, 20],[-20, -81, 20],[-20, -80, 20],[-20, -79, 20],[-20, -78, 20],[-20, -77, 20],[-20, -76, 20],[-20, -75, 20],[-20, -74, 20],[-20, -73, 20],[-20, -72, 20],[-20, -71, 20],[-20, -70, 20],[-20, -69, 20],[-20, -68, 20],[-20, -67, 20],[-20, -66, 20],[-20, -65, 20],[-20, -64, 20],[-20, -63, 20],[-20, -62, 20],[-20, -61, 20],[-20, -60, 20],[-20, -59, 20],[-20, -58, 20],[-20, -57, 20],[-20, -56, 20],[-20, -55, 20],[-20, -54, 20],[-20, -53, 20],[-20, -52, 20],[-20, -51, 20],
[-20, -50, 20],[-20, -49, 20],[-20, -48, 20],[-20, -47, 20],[-20, -46, 20],[-20, -45, 20],[-20, -44, 20],[-20, -43, 20],[-20, -42, 20],[-20, -41, 20],[-20, -40, 20],[-20, -39, 20],[-20, -38, 20],[-20, -37, 20],[-20, -36, 20],[-20, -35, 20],[-20, -34, 20],[-20, -33, 20],[-20, -32, 20],[-20, -31, 20],[-20, -30, 20],[-20, -29, 20],[-20, -28, 20],[-20, -27, 20],[-20, -26, 20],[-20, -25, 20],[-20, -24, 20],[-20, -23, 20],[-20, -22, 20],[-20, -21, 20],[-20, -20, 20],[-20, -19, 20],[-20, -18, 20],[-20, -17, 20],[-20, -16, 20],[-20, -15, 20],[-20, -14, 20],[-20, -13, 20],[-20, -12, 20],[-20, -11, 20],[-20, -10, 20],[-20, -9, 20],[-20, -8, 20],[-20, -7, 20],[-20, -6, 20],[-20, -5, 20],[-20, -4, 20],[-20, -3, 20],[-20, -2, 20],[-20, -1, 20],
[-20, 0, 20],[-20, 1, 20],[-20, 2, 20],[-20, 3, 20],[-20, 4, 20],[-20, 5, 20],[-20, 6, 20],[-20, 7, 20],[-20, 8, 20],[-20, 9, 20],[-20, 10, 20],[-20, 11, 20],[-20, 12, 20],[-20, 13, 20],[-20, 14, 20],[-20, 15, 20],[-20, 16, 20],[-20, 17, 20],[-20, 18, 20],[-20, 19, 20],[-20, 20, 20],[-20, 21, 20],[-20, 22, 20],[-20, 23, 20],[-20, 24, 20],[-20, 25, 20],[-20, 26, 20],[-20, 27, 20],[-20, 28, 20],[-20, 29, 20],[-20, 30, 20],[-20, 31, 20],[-20, 32, 20],[-20, 33, 20],[-20, 34, 20],[-20, 35, 20],[-20, 36, 20],[-20, 37, 20],[-20, 38, 20],[-20, 39, 20],[-20, 40, 20],[-20, 41, 20],[-20, 42, 20],[-20, 43, 20],[-20, 44, 20],[-20, 45, 20],[-20, 46, 20],[-20, 47, 20],[-20, 48, 20],[-20, 49, 20],
[-20, 50, 20],[-20, 51, 20],[-20, 52, 20],[-20, 53, 20],[-20, 54, 20],[-20, 55, 20],[-20, 56, 20],[-20, 57, 20],[-20, 58, 20],[-20, 59, 20],[-20, 60, 20],[-20, 61, 20],[-20, 62, 20],[-20, 63, 20],[-20, 64, 20],[-20, 65, 20],[-20, 66, 20],[-20, 67, 20],[-20, 68, 20],[-20, 69, 20],[-20, 70, 20],[-20, 71, 20],[-20, 72, 20],[-20, 73, 20],[-20, 74, 20],[-20, 75, 20],[-20, 76, 20],[-20, 77, 20],[-20, 78, 20],[-20, 79, 20],[-20, 80, 20],[-20, 81, 20],[-20, 82, 20],[-20, 83, 20],[-20, 84, 20],[-20, 85, 20],[-20, 86, 20],[-20, 87, 20],[-20, 88, 20],[-20, 89, 20],[-20, 90, 20],[-20, 91, 20],[-20, 92, 20],[-20, 93, 20],[-20, 94, 20],[-20, 95, 20],[-20, 96, 20],[-20, 97, 20],[-20, 98, 20],[-20, 99, 20],
[-20, 100, 20],[-20, 101, 20],[-20, 102, 20],[-20, 103, 20],[-20, 104, 20],[-20, 105, 20],[-20, 106, 20],[-20, 107, 20],[-20, 108, 20],[-20, 109, 20],[-20, 110, 20],[-20, 111, 20],[-20, 112, 20],[-20, 113, 20],[-20, 114, 20],[-20, 115, 20],[-20, 116, 20],[-20, 117, 20],[-20, 118, 20],[-20, 119, 20],[-20, 120, 20],[-20, 121, 20],[-20, 122, 20],[-20, 123, 20],[-20, 124, 20],[-20, 125, 20],[-20, 126, 20],[-20, 127, 20],[-20, 128, 20],[-20, 129, 20],[-20, 130, 20],[-20, 131, 20],[-20, 132, 20],[-20, 133, 20],[-20, 134, 20],[-20, 135, 20],[-20, 136, 20],[-20, 137, 20],[-20, 138, 20],[-20, 139, 20],[-20, 140, 20],[-20, 141, 20],[-20, 142, 20],[-20, 143, 20],[-20, 144, 20],[-20, 145, 20],[-20, 146, 20],[-20, 147, 20],[-20, 148, 20],[-20, 149, 20],
[-20, 150, 20],[-20, 151, 20],[-20, 152, 20],[-20, 153, 20],[-20, 154, 20],[-20, 155, 20],[-20, 156, 20],[-20, 157, 20],[-20, 158, 20],[-20, 159, 20],[-20, 160, 20],[-20, 161, 20],[-20, 162, 20],[-20, 163, 20],[-20, 164, 20],[-20, 165, 20],[-20, 166, 20],[-20, 167, 20],[-20, 168, 20],[-20, 169, 20],[-20, 170, 20],[-20, 171, 20],[-20, 172, 20],[-20, 173, 20],[-20, 174, 20],[-20, 175, 20],[-20, 176, 20],[-20, 177, 20],[-20, 178, 20],[-20, 179, 20],[-20, 180, 20],[-20, 181, 20],[-20, 182, 20],[-20, 183, 20],[-20, 184, 20],[-20, 185, 20],[-20, 186, 20],[-20, 187, 20],[-20, 188, 20],[-20, 189, 20],[-20, 190, 20],[-20, 191, 20],[-20, 192, 20],[-20, 193, 20],[-20, 194, 20],[-20, 195, 20],[-20, 196, 20],[-20, 197, 20],[-20, 198, 20],[-20, 199, 20],
[-20, 200, 20],[-20, 201, 20],[-20, 202, 20],[-20, 203, 20],[-20, 204, 20],[-20, 205, 20],[-20, 206, 20],[-20, 207, 20],[-20, 208, 20],[-20, 209, 20],[-20, 210, 20],[-20, 211, 20],[-20, 212, 20],[-20, 213, 20],[-20, 214, 20],[-20, 215, 20],[-20, 216, 20],[-20, 217, 20],[-20, 218, 20],[-20, 219, 20],[-20, 220, 20],[-20, 221, 20],[-20, 222, 20],[-20, 223, 20],[-20, 224, 20],
[-20, 225, 20],[-21, 225, 20],[-22, 225, 20],[-23, 225, 20],[-24, 225, 20],[-25, 225, 20],[-26, 225, 20],[-27, 225, 20],[-28, 225, 20],[-29, 225, 20],[-30, 225, 20],[-31, 225, 20],[-32, 225, 20],[-33, 225, 20],[-34, 225, 20],[-35, 225, 20],[-36, 225, 20],[-37, 225, 20],[-38, 225, 20],[-39, 225, 20],[-40, 225, 20],[-41, 225, 20],[-42, 225, 20],[-43, 225, 20],[-44, 225, 20],[-45, 225, 20],[-46, 225, 20],[-47, 225, 20],[-48, 225, 20],[-49, 225, 20],[-50, 225, 20],[-51, 225, 20],[-52, 225, 20],[-53, 225, 20],[-54, 225, 20],[-55, 225, 20],[-56, 225, 20],[-57, 225, 20],[-58, 225, 20],[-59, 225, 20],[-60, 225, 20],[-61, 225, 20],[-62, 225, 20],[-63, 225, 20],[-64, 225, 20],[-65, 225, 20],[-66, 225, 20],[-67, 225, 20],[-68, 225, 20],[-69, 225, 20],
[-70, 225, 20],[-71, 225, 20],[-72, 225, 20],[-73, 225, 20],[-74, 225, 20],[-75, 225, 20],[-76, 225, 20],[-77, 225, 20],[-78, 225, 20],[-79, 225, 20],[-80, 225, 20],[-81, 225, 20],[-82, 225, 20],[-83, 225, 20],[-84, 225, 20],[-85, 225, 20],[-86, 225, 20],[-87, 225, 20],[-88, 225, 20],[-89, 225, 20],[-90, 225, 20],[-91, 225, 20],[-92, 225, 20],[-93, 225, 20],[-94, 225, 20],[-95, 225, 20],[-96, 225, 20],[-97, 225, 20],[-98, 225, 20],[-99, 225, 20],[-100, 225, 20],[-101, 225, 20],[-102, 225, 20],[-103, 225, 20],[-104, 225, 20],[-105, 225, 20],[-106, 225, 20],[-107, 225, 20],[-108, 225, 20],[-109, 225, 20],[-110, 225, 20],[-111, 225, 20],[-112, 225, 20],[-113, 225, 20],[-114, 225, 20],[-115, 225, 20],[-116, 225, 20],[-117, 225, 20],[-118, 225, 20],[-119, 225, 20],
[-120, 225, 20],[-121, 225, 20],[-122, 225, 20],[-123, 225, 20],[-124, 225, 20],[-125, 225, 20],[-126, 225, 20],[-127, 225, 20],[-128, 225, 20],[-129, 225, 20],[-130, 225, 20],[-131, 225, 20],[-132, 225, 20],[-133, 225, 20],[-134, 225, 20],[-135, 225, 20],[-136, 225, 20],[-137, 225, 20],[-138, 225, 20],[-139, 225, 20],[-140, 225, 20],[-141, 225, 20],[-142, 225, 20],[-143, 225, 20],[-144, 225, 20],[-145, 225, 20],[-146, 225, 20],[-147, 225, 20],[-148, 225, 20],[-149, 225, 20],[-150, 225, 20],[-151, 225, 20],[-152, 225, 20],[-153, 225, 20],[-154, 225, 20],[-155, 225, 20],[-156, 225, 20],[-157, 225, 20],[-158, 225, 20],[-159, 225, 20],[-160, 225, 20],[-161, 225, 20],[-162, 225, 20],[-163, 225, 20],[-164, 225, 20],[-165, 225, 20],[-166, 225, 20],[-167, 225, 20],[-168, 225, 20],[-169, 225, 20],
[-170, 225, 20],[-171, 225, 20],[-172, 225, 20],[-173, 225, 20],[-174, 225, 20],[-175, 225, 20],[-176, 225, 20],[-177, 225, 20],[-178, 225, 20],[-179, 225, 20],[-180, 225, 20],[-181, 225, 20],[-182, 225, 20],[-183, 225, 20],[-184, 225, 20],[-185, 225, 20],[-186, 225, 20],[-187, 225, 20],[-188, 225, 20],[-189, 225, 20],[-190, 225, 20],[-191, 225, 20],[-192, 225, 20],[-193, 225, 20],[-194, 225, 20],[-195, 225, 20],[-196, 225, 20],[-197, 225, 20],[-198, 225, 20],[-199, 225, 20],[-200, 225, 20],[-201, 225, 20],[-202, 225, 20],[-203, 225, 20],[-204, 225, 20],[-205, 225, 20],[-206, 225, 20],[-207, 225, 20],[-208, 225, 20],[-209, 225, 20],[-210, 225, 20],[-211, 225, 20],[-212, 225, 20],[-213, 225, 20],[-214, 225, 20],[-215, 225, 20],[-216, 225, 20],[-217, 225, 20],[-218, 225, 20],[-219, 225, 20],
[-220, 225, 20],[-221, 225, 20],[-222, 225, 20],[-223, 225, 20],[-224, 225, 20],[-225, 225, 20],[-226, 225, 20],[-227, 225, 20],[-228, 225, 20],[-229, 225, 20],[-230, 225, 20],[-231, 225, 20],[-232, 225, 20],[-233, 225, 20],[-234, 225, 20],[-235, 225, 20],[-236, 225, 20],[-237, 225, 20],[-238, 225, 20],[-239, 225, 20],[-240, 225, 20],[-241, 225, 20],[-242, 225, 20],[-243, 225, 20],[-244, 225, 20],
];

const multiplier = 2;

var n = 0;

var mid_x = 652;
var mid_y = 380;

function addText(text, x, y, group, floor, mid_x, mid_y) {
    /* Function to add room names at certain locations */
    
    var loader = new THREE.FontLoader();
    loader.load('https://threejs.org/examples/fonts/optimer_regular.typeface.json', function(font) {

        var textGeo = new THREE.TextGeometry(text, {
            font: font,
            size: 20,
            height: 1,
        });
        var textMaterial = new THREE.MeshBasicMaterial({
            color: 0x000000,
            visible: true
        });
        var mesh = new THREE.Mesh(textGeo, textMaterial);
        mesh.position.set((x - mid_x) * multiplier, (mid_y - y) * multiplier, 50+floor*50);
        mesh.name = "text1";
        mesh.layers.set(1);
        group.add(mesh);
        
        mesh = new THREE.Mesh(textGeo, textMaterial);
        mesh.position.set((x - mid_x) * multiplier, (mid_y - y) * multiplier, 50+floor*50);
        mesh.name = "text2";
        mesh.layers.set(2);
        group.add(mesh);
    });
};

function addLines(points, group, floor) {
    /* Function add walls at certain locations */
    
    let x1, y1, x2, y2, w;
    x1 = points[0];
    y1 = points[1];
    x2 = points[2];
    y2 = points[3];
    w = points[4] + 1;
    const shape = new THREE.Shape();
    shape.moveTo((x1 - mid_x) * multiplier, (mid_y - y1) * multiplier);
    shape.lineTo((x2 - mid_x) * multiplier, (mid_y - y2) * multiplier);
    shape.lineTo((x2 - mid_x + w) * multiplier, (mid_y - y2) * multiplier);
    shape.lineTo((x1 - mid_x + w) * multiplier, (mid_y - y1) * multiplier);
    shape.lineTo((x1 - mid_x) * multiplier, (mid_y - y1) * multiplier);

    const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);
    const material = new THREE.MeshBasicMaterial({
        color: 0xffffff
    });
    const mesh = new THREE.Mesh(geometry, material);
    mesh.position.set(0, 0, floor*50);
    group.add(mesh);
};

function changeFloor() {
    if (btn.value == "All Floors") {
        for (let i=0; i<groups.length; i++) {
            groups[i].visible = true;
        }
    }
    else{
        for (let i=0; i<groups.length; i++) {
            groups[i].visible = false;
        }
        visibility = btn.value
        groups[btn.value].visible = true;
    }
};

function resize() {
    camera.aspect = window.innerWidth/window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight)

    insetwidth = window.innerWidth / 3;
    insetheight = window.innerHeight / 3;
    camera_first.aspect = insetwidth/insetheight;
    camera_first.updateProjectionMatrix();
}

function toggle_navigation() {
    if (travel) {
        travel = false
    } else {
        travel = true
    }
}

function animate() {
    requestAnimationFrame(animate);
    controls.update();
    scene.traverse (function (object) {
        if (object instanceof THREE.Mesh) {
            if (object.name == "text1") {
                object.quaternion.copy( camera.quaternion );
            }
            if (object.name == "text2") {
                object.quaternion.copy( camera_first.quaternion );
            }
        }
    });
    renderer.setViewport(0, 0, window.innerWidth, window.innerHeight)
    renderer.render(scene, camera);
    renderer.clearDepth();
    renderer.setScissorTest(true);
    renderer.setScissor(
        window.innerWidth - insetwidth - 16,
        window.innerHeight - insetheight - 16,
        insetwidth,
        insetheight,
    );
    renderer.setViewport(
        window.innerWidth - insetwidth - 16,
        window.innerHeight - insetheight - 16,
        insetwidth,
        insetheight,
    );
    renderer.render(scene, camera_first);
    renderer.setScissorTest(false);
    
    // Move first person view camera
    
    if (travel) {
        if (n < path.length) {
            camera_first.position.set(path[n][0], path[n][1], 20+Math.sin(n/6)/4);
            n += 75;
        }
        if (n < path.length) {
            camera_first.lookAt(path[n][0], path[n][1], 20+Math.sin((n-75)/6)/4);
            n -= 74;
        }
        if (n > 1) {
            camera_first.rotation.x = Math.PI / 2;
            camera_first.rotation.z = 0;
        }
    }
};

function render_model(model) {
    
    $('#loadingText').html("Rendering model...");
    
    //Get JSON model attributes
    const num_floors = model["num_floors"];
    const list_of_text = model["1"]["rooms"];
    const list_of_points = model["1"]["points"];
    
    // Setting initial values
    
    visibility = 0;
    size = 20;
    travel = false;
    groups = new Array();
    
    // Create Three.js renderer
    
    renderer = new THREE.WebGLRenderer();
    renderer.setPixelRatio(window.devicePixelRatio); //get the correct pixel detail on portable devices
    renderer.domElement.style.position = "absolute";
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0xefebd9, 1); // Default background color
    document.body.appendChild(renderer.domElement);
    
    // Create Three.js scene
    
    scene = new THREE.Scene();
    const axesHelper = new THREE.AxesHelper(200);
    scene.add(axesHelper);
    
    // Bird eye view camera
    
    camera = new THREE.PerspectiveCamera(
        90, //FOV
        window.innerWidth / window.innerHeight, //aspect
        1, //near clipping plane
        25000 //far clipping plane
    );
    camera.layers.enable(1);
    camera.position.set(0, 0, 800);
    camera.lookAt(0, 0, 0);
    
    // First person view camera
    
    camera_first = new THREE.PerspectiveCamera(
        90, //FOV
        window.innerWidth / window.innerHeight, //aspect
        1, //near clipping plane
        2500 //far clipping plane
    );
    camera_first.layers.enable(2);
    camera_first.position.set(path[0][0], path[0][1], path[0][2]);
    camera_first.rotation.x = Math.PI / 2;
    camera_first.rotation.z = 0;
    
    // Create floor GUI
    
    let floor_btn = document.createElement("select");
    floor_btn.add = "Floor 1";
    floor_btn.add = "Floor 2";
    floor_btn.setAttribute("id", "currentFloor");
    floor_btn.setAttribute("name", "Floor");
    document.body.appendChild(floor_btn);
    floor_btn.addEventListener("change", changeFloor);
    floor_btn.style.backgroundColor = "white";
    floor_btn.style.position = "absolute";
    
    // let perspective_btn = document.createElement("input");
    // document.body.appendChild(perspective_btn);
    // floor_btn.setAttribute("type", "button");
    // floor_btn.setAttribute("name", "Perspective");
    // perspective_btn.style.position = "absolute";
    // perspective_btn.style.top = 100;
    
    
    var newOption = document.createElement("option");
    newOption.setAttribute("value", "All Floors");
    node = document.createTextNode("All Floors");
    newOption.appendChild(node);
    document.getElementById("currentFloor").appendChild(newOption);
    
    controls = new THREE.TrackballControls(camera, renderer.domElement);
    controls.rotateSpeed = 0;
   
    for (let i = 0; i < num_floors; i++) {
        let list_of_text = model[(i + 1).toString()]["rooms"];
        let list_of_points = model[(i + 1).toString()]["points"];
        group = new THREE.Group();
        var newOption = document.createElement("option");
        newOption.setAttribute("value", i);
        node = document.createTextNode("Floor " + String(i + 1));
        newOption.appendChild(node);
        document.getElementById("currentFloor").appendChild(newOption);
        for (let j = 0; j < list_of_points.length; j++) {
            addLines(list_of_points[j], group, i);
        }
        for (let j = 0; j < list_of_text.length; j++){
            addText(list_of_text[j][0], list_of_text[j][1], list_of_text[j][2], group, i, mid_x, mid_y);
        }
        scene.add(group);
        groups.push(group);
        mid_x = 424;
        mid_y = 351;
    }
   
    resize();
    animate();  
    renderer.domElement.addEventListener("click", toggle_navigation);
    window.addEventListener("resize", resize);
    $('#loadingScreen').remove();
}
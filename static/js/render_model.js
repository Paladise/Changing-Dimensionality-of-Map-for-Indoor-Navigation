var model_json, scene, scene2, renderer, camera, controls, groups, visibility, group, insetwidth, insetheight, size, travel, floor_btn, room1, room2, pathPoints, findPathButton;

const extrudeSettings = {
    steps: 2,
    depth: 30,
    bevelEnabled: false
};

var path = [[-1160, 436, 1], [-1162, 436, 1], [-1164, 436, 1], [-1166, 436, 1], [-1168, 436, 1], [-1170, 436, 1], [-1172, 436, 1], [-1174, 436, 1], [-1176, 436, 1], [-1178, 436, 1], [-1180, 436, 1], [-1182, 436, 1], [-1184, 436, 1], [-1186, 436, 1], [-1188, 436, 1], [-1190, 436, 1], [-1192, 436, 1], [-1194, 436, 1], [-1196, 436, 1], [-1198, 436, 1], [-1200, 436, 1], [-1202, 436, 1], [-1202, 438, 1], [-1202, 440, 1], [-1202, 442, 1], [-1202, 444, 1], [-1202, 446, 1], [-1202, 448, 1], [-1202, 450, 1], [-1202, 452, 1], [-1202, 454, 1], [-1202, 456, 1], [-1202, 458, 1], [-1202, 460, 1], [-1202, 462, 1], [-1202, 464, 1], [-1202, 466, 1], [-1202, 468, 1], [-1202, 470, 1], [-1202, 472, 1], [-1202, 474, 1], [-1202, 476, 1], [-1202, 478, 1], [-1202, 480, 1], [-1202, 482, 1], [-1202, 484, 1], [-1202, 486, 1], [-1202, 488, 1], [-1202, 490, 1], [-1202, 492, 1], [-1202, 494, 1], [-1202, 496, 1], [-1202, 498, 1], [-1202, 500, 1], [-1202, 502, 1], [-1202, 504, 1], [-1200, 504, 1], [-1198, 504, 1], [-1196, 504, 1], [-1194, 504, 1], [-1192, 504, 1], [-1190, 504, 1], [-1188, 504, 1], [-1186, 504, 1], [-1184, 504, 1], [-1182, 504, 1], [-1180, 504, 1], [-1178, 504, 1], [-1176, 504, 1], [-1174, 504, 1], [-1172, 504, 1], [-1170, 504, 1], [-1168, 504, 1], [-1166, 504, 1], [-1164, 504, 1], [-1162, 504, 1], [-1160, 504, 1], [-1158, 504, 1], [-1156, 504, 1], [-1154, 504, 1], [-1152, 504, 1], [-1150, 504, 1], [-1148, 504, 1], [-1146, 504, 1], [-1144, 504, 1], [-1142, 504, 1], [-1140, 504, 1], [-1138, 504, 1], [-1136, 504, 1], [-1134, 504, 1], [-1132, 504, 1], [-1130, 504, 1], [-1128, 504, 1], [-1126, 504, 1], [-1124, 504, 1], [-1122, 504, 1], [-1120, 504, 1], [-1118, 504, 1], [-1116, 504, 1], [-1114, 504, 1], [-1112, 504, 1], [-1110, 504, 1], [-1108, 504, 1], [-1106, 504, 1], [-1104, 504, 1], [-1102, 504, 1], [-1102, 502, 1], [-1102, 500, 1], [-1102, 498, 1], [-1102, 496, 1], [-1102, 494, 1], [-1102, 492, 1], [-1102, 490, 1], [-1102, 488, 1], [-1100, 488, 1], [-1098, 488, 1], [-1096, 488, 1], [-1094, 488, 1], [-1092, 488, 1], [-1090, 488, 1], [-1088, 488, 1], [-1086, 488, 1], [-1084, 488, 1], [-1082, 488, 1], [-1080, 488, 1], [-1078, 488, 1], [-1076, 488, 1], [-1074, 488, 1], [-1072, 488, 1], [-1070, 488, 1], [-1068, 488, 1], [-1068, 486, 1], [-1066, 486, 1], [-1064, 486, 1], [-1062, 486, 1], [-1060, 486, 1], [-1058, 486, 1], [-1056, 486, 1], [-1054, 486, 1], [-1052, 486, 1], [-1050, 486, 1], [-1048, 486, 1], [-1046, 486, 1], [-1044, 486, 1], [-1044, 484, 1], [-1042, 484, 1], [-1040, 484, 1], [-1038, 484, 1], [-1036, 484, 1], [-1034, 484, 1], [-1032, 484, 1], [-1030, 484, 1], [-1028, 484, 1], [-1026, 484, 1], [-1024, 484, 1], [-1022, 484, 1], [-1020, 484, 1], [-1018, 484, 1], [-1016, 484, 1], [-1014, 484, 1], [-1012, 484, 1], [-1010, 484, 1], [-1008, 484, 1], [-1006, 484, 1], [-1004, 484, 1], [-1002, 484, 1], [-1000, 484, 1], [-998, 484, 1], [-996, 484, 1], [-994, 484, 1], [-992, 484, 1], [-990, 484, 1], [-988, 484, 1], [-986, 484, 1], [-984, 484, 1], [-982, 484, 1], [-980, 484, 1], [-978, 484, 1], [-976, 484, 1], [-974, 484, 1], [-972, 484, 1], [-970, 484, 1], [-968, 484, 1], [-966, 484, 1], [-964, 484, 1], [-962, 484, 1], [-960, 484, 1], [-958, 484, 1], [-956, 484, 1], [-954, 484, 1], [-952, 484, 1], [-950, 484, 1], [-948, 484, 1], [-946, 484, 1], [-944, 484, 1], [-942, 484, 1], [-940, 484, 1], [-938, 484, 1], [-936, 484, 1], [-934, 484, 1], [-932, 484, 1], [-930, 484, 1], [-928, 484, 1], [-926, 484, 1], [-924, 484, 1], [-922, 484, 1], [-920, 484, 1], [-918, 484, 1], [-916, 484, 1], [-914, 484, 1], [-912, 484, 1], [-910, 484, 1], [-908, 484, 1], [-906, 484, 1], [-904, 484, 1], [-902, 484, 1], [-900, 484, 1], [-898, 484, 1], [-896, 484, 1], [-894, 484, 1], [-892, 484, 1], [-890, 484, 1], [-888, 484, 1], [-886, 484, 1], [-884, 484, 1], [-882, 484, 1], [-880, 484, 1], [-878, 484, 1], [-876, 484, 1], [-874, 484, 1], [-872, 484, 1], [-870, 484, 1], [-868, 484, 1], [-868, 482, 1], [-866, 482, 1], [-864, 482, 1], [-862, 482, 1], [-860, 482, 1], [-858, 482, 1], [-856, 482, 1], [-854, 482, 1], [-852, 482, 1], [-850, 482, 1], [-848, 482, 1], [-846, 482, 1], [-844, 482, 1], [-842, 482, 1], [-840, 482, 1], [-838, 482, 1], [-836, 482, 1], [-834, 482, 1], [-832, 482, 1], [-830, 482, 1], [-828, 482, 1], [-826, 482, 1], [-824, 482, 1], [-822, 482, 1], [-820, 482, 1], [-818, 482, 1], [-816, 482, 1], [-814, 482, 1], [-812, 482, 1], [-810, 482, 1], [-808, 482, 1], [-806, 482, 1], [-804, 482, 1], [-802, 482, 1], [-800, 482, 1], [-798, 482, 1], [-796, 482, 1], [-794, 482, 1], [-792, 482, 1], [-790, 482, 1], [-788, 482, 1], [-786, 482, 1], [-784, 482, 1], [-782, 482, 1], [-780, 482, 1], [-778, 482, 1], [-776, 482, 1], [-774, 482, 1], [-772, 482, 1], [-770, 482, 1], [-768, 482, 1], [-766, 482, 1], [-764, 482, 1], [-762, 482, 1], [-760, 482, 1], [-758, 482, 1], [-756, 482, 1], [-754, 482, 1], [-752, 482, 1], [-750, 482, 1], [-748, 482, 1], [-746, 482, 1], [-744, 482, 1], [-742, 482, 1], [-740, 482, 1], [-738, 482, 1], [-736, 482, 1], [-734, 482, 1], [-732, 482, 1], [-730, 482, 1], [-728, 482, 1], [-726, 482, 1], [-724, 482, 1], [-722, 482, 1], [-720, 482, 1], [-718, 482, 1], [-716, 482, 1], [-716, 480, 1], [-714, 480, 1], [-714, 478, 1], [-714, 476, 1], [-714, 474, 1], [-714, 472, 1], [-714, 470, 1], [-714, 468, 1], [-714, 466, 1], [-714, 464, 1], [-714, 462, 1], [-714, 460, 1], [-714, 458, 1], [-714, 456, 1], [-714, 454, 1], [-714, 452, 1], [-714, 450, 1], [-714, 448, 1], [-714, 446, 1], [-714, 444, 1], [-714, 442, 1], [-714, 440, 1], [-714, 438, 1], [-714, 436, 1], [-714, 434, 1], [-714, 432, 1], [-714, 430, 1], [-714, 428, 1], [-714, 426, 1], [-714, 424, 1], [-714, 422, 1], [-714, 420, 1], [-714, 418, 1], [-714, 416, 1], [-714, 414, 1], [-714, 412, 1], [-714, 410, 1], [-714, 408, 1], [-714, 406, 1], [-714, 404, 1], [-714, 402, 1], [-714, 400, 1], [-714, 398, 1], [-714, 396, 1], [-714, 394, 1], [-714, 392, 1], [-714, 390, 1], [-714, 388, 1], [-714, 386, 1], [-712, 386, 1], [-710, 386, 1], [-708, 386, 1], [-706, 386, 1], [-704, 386, 1], [-702, 386, 1], [-700, 386, 1], [-698, 386, 1], [-696, 386, 1], [-694, 386, 1], [-692, 386, 1], [-690, 386, 1], [-688, 386, 1], [-686, 386, 1], [-684, 386, 1], [-682, 386, 1], [-680, 386, 1], [-678, 386, 1], [-676, 386, 1], [-674, 386, 1], [-672, 386, 1], [-670, 386, 1], [-668, 386, 1], [-666, 386, 1], [-664, 386, 1], [-662, 386, 1], [-660, 386, 1], [-658, 386, 1], [-656, 386, 1], [-654, 386, 1], [-652, 386, 1], [-650, 386, 1], [-648, 386, 1], [-646, 386, 1], [-644, 386, 1], [-642, 386, 1], [-640, 386, 1], [-640, 384, 1], [-638, 384, 1], [-638, 382, 1], [-638, 380, 1], [-638, 378, 1], [-638, 376, 1], [-638, 374, 1], [-638, 372, 1], [-638, 370, 1], [-638, 368, 1], [-638, 366, 1], [-638, 364, 1], [-638, 362, 1], [-638, 360, 1], [-638, 358, 1], [-638, 356, 1], [-638, 354, 1], [-638, 352, 1], [-638, 350, 1], [-638, 348, 1], [-638, 346, 1], [-638, 344, 1], [-638, 342, 1], [-638, 340, 1], [-638, 338, 1], [-638, 336, 1], [-638, 334, 1], [-636, 334, 1], [-634, 334, 1], [-632, 334, 1], [-632, 332, 1], [-632, 330, 1], [-632, 328, 1], [-632, 326, 1], [-632, 324, 1], [-632, 322, 1], [-632, 320, 1], [-632, 318, 1], [-632, 316, 1], [-632, 314, 1], [-632, 312, 1], [-632, 310, 1], [-632, 308, 1], [-632, 306, 1], [-632, 304, 1], [-632, 302, 1], [-632, 300, 1], [-632, 298, 1], [-632, 296, 1], [-632, 294, 1], [-632, 292, 1], [-632, 290, 1], [-632, 288, 1], [-632, 286, 1], [-632, 284, 1], [-632, 282, 1], [-632, 280, 1], [-632, 278, 1], [-632, 276, 1], [-632, 274, 1], [-632, 272, 1], [-632, 270, 1], [-632, 268, 1], [-632, 266, 1], [-632, 264, 1], [-632, 262, 1], [-632, 260, 1], [-632, 258, 1], [-632, 256, 1], [-632, 254, 1], [-632, 252, 1], [-630, 252, 1], [-628, 252, 1], [-626, 252, 1], [-624, 252, 1], [-622, 252, 1], [-620, 252, 1], [-618, 252, 1], [-616, 252, 1], [-614, 252, 1], [-612, 252, 1], [-610, 252, 1], [-610, 250, 1], [-610, 248, 1], [-610, 246, 1], [-608, 246, 1], [-606, 246, 1], [-604, 246, 1], [-602, 246, 1], [-600, 246, 1], [-600, 244, 1], [-598, 244, 1], [-596, 244, 1], [-596, 242, 1], [-594, 242, 1], [-592, 242, 1], [-590, 242, 1], [-588, 242, 1], [-586, 242, 1], [-584, 242, 1], [-584, 240, 1], [-582, 240, 1], [-580, 240, 1], [-578, 240, 1], [-576, 240, 1], [-574, 240, 1], [-572, 240, 1], [-570, 240, 1], [-568, 240, 1], [-568, 238, 1], [-566, 238, 1], [-564, 238, 1], [-562, 238, 1], [-560, 238, 1], [-558, 238, 1], [-556, 238, 1], [-554, 238, 1], [-552, 238, 1], [-550, 238, 1], [-548, 238, 1], [-546, 238, 1], [-544, 238, 1], [-542, 238, 1], [-540, 238, 1], [-538, 238, 1], [-536, 238, 1], [-534, 238, 1], [-532, 238, 1], [-530, 238, 1], [-528, 238, 1], [-526, 238, 1], [-524, 238, 1], [-522, 238, 1], [-520, 238, 1], [-518, 238, 1], [-516, 238, 1], [-514, 238, 1], [-512, 238, 1], [-510, 238, 1], [-508, 238, 1], [-506, 238, 1], [-504, 238, 1], [-502, 238, 1], [-500, 238, 1], [-498, 238, 1], [-496, 238, 1], [-494, 238, 1], [-492, 238, 1], [-490, 238, 1], [-488, 238, 1], [-486, 238, 1], [-484, 238, 1], [-482, 238, 1], [-480, 238, 1], [-478, 238, 1], [-476, 238, 1], [-474, 238, 1], [-472, 238, 1], [-470, 238, 1], [-468, 238, 1], [-466, 238, 1], [-464, 238, 1], [-462, 238, 1], [-460, 238, 1], [-458, 238, 1], [-456, 238, 1], [-456, 236, 1], [-454, 236, 1], [-452, 236, 1], [-450, 236, 1], [-448, 236, 1], [-446, 236, 1], [-444, 236, 1], [-442, 236, 1], [-440, 236, 1], [-438, 236, 1], [-438, 234, 1], [-436, 234, 1], [-434, 234, 1], [-432, 234, 1], [-430, 234, 1], [-428, 234, 1], [-426, 234, 1], [-426, 232, 1], [-424, 232, 1], [-422, 232, 1], [-420, 232, 1], [-418, 232, 1], [-416, 232, 1], [-414, 232, 1], [-412, 232, 1], [-410, 232, 1], [-410, 230, 1], [-408, 230, 1], [-406, 230, 1], [-404, 230, 1], [-402, 230, 1], [-402, 228, 1], [-400, 228, 1], [-398, 228, 1], [-396, 228, 1], [-396, 226, 1], [-394, 226, 1], [-394, 224, 1], [-392, 224, 1], [-390, 224, 1], [-388, 224, 1], [-386, 224, 1], [-384, 224, 1], [-382, 224, 1], [-380, 224, 1], [-378, 224, 1], [-376, 224, 1], [-374, 224, 1], [-372, 224, 1], [-370, 224, 1], [-368, 224, 1], [-366, 224, 1], [-364, 224, 1], [-362, 224, 1], [-360, 224, 1], [-360, 222, 1], [-358, 222, 1], [-356, 222, 1], [-356, 220, 1], [-354, 220, 1], [-352, 220, 1], [-352, 218, 1], [-350, 218, 1], [-350, 216, 1], [-348, 216, 1], [-346, 216, 1], [-346, 214, 1], [-344, 214, 1], [-342, 214, 1], [-342, 212, 1], [-340, 212, 1], [-338, 212, 1], [-336, 212, 1], [-336, 210, 1], [-334, 210, 1], [-332, 210, 1], [-330, 210, 1], [-328, 210, 1], [-328, 208, 1], [-326, 208, 1], [-324, 208, 1], [-324, 206, 1], [-322, 206, 1], [-320, 206, 1], [-318, 206, 1], [-316, 206, 1], [-314, 206, 1], [-314, 204, 1], [-312, 204, 1], [-310, 204, 1], [-308, 204, 1], [-306, 204, 1], [-304, 204, 1], [-302, 204, 1], [-300, 204, 1], [-298, 204, 1], [-298, 202, 1], [-296, 202, 1], [-294, 202, 1], [-292, 202, 1], [-290, 202, 1], [-288, 202, 1], [-286, 202, 1], [-284, 202, 1], [-282, 202, 1], [-280, 202, 1], [-278, 202, 1], [-276, 202, 1], [-274, 202, 1], [-274, 200, 1], [-272, 200, 1], [-270, 200, 1], [-268, 200, 1], [-266, 200, 1], [-264, 200, 1], [-262, 200, 1], [-260, 200, 1], [-258, 200, 1], [-256, 200, 1], [-256, 198, 1], [-254, 198, 1], [-252, 198, 1], [-252, 200, 1], [-252, 202, 1], [-252, 204, 1], [-252, 206, 1], [-252, 208, 1], [-252, 210, 1], [-252, 212, 1], [-250, 212, 1], [-248, 212, 1], [-246, 212, 1], [-244, 212, 1], [-242, 212, 1], [-240, 212, 1], [-238, 212, 1], [-236, 212, 1], [-234, 212, 1], [-232, 212, 1], [-230, 212, 1], [-228, 212, 1], [-226, 212, 1], [-224, 212, 1], [-222, 212, 1], [-220, 212, 1], [-218, 212, 1], [-216, 212, 1], [-214, 212, 1], [-212, 212, 1], [-210, 212, 1], [-208, 212, 1], [-208, 214, 1], [-208, 216, 1], [-208, 218, 1], [-208, 220, 1], [-208, 222, 1], [-208, 224, 1], [-208, 226, 1], [-206, 226, 1], [-204, 226, 1], [-202, 226, 1], [-200, 226, 1], [-198, 226, 1], [-196, 226, 1], [-196, 224, 1], [-196, 222, 1], [-196, 220, 1], [-196, 218, 1], [-194, 218, 1], [-194, 216, 1], [-194, 214, 1], [-194, 212, 1], [-192, 212, 1], [-190, 212, 1], [-188, 212, 1], [-186, 212, 1], [-184, 212, 1], [-182, 212, 1], [-180, 212, 1], [-178, 212, 1], [-176, 212, 1], [-174, 212, 1], [-172, 212, 1], [-170, 212, 1], [-168, 212, 1], [-166, 212, 1], [-164, 212, 1], [-162, 212, 1], [-160, 212, 1], [-158, 212, 1], [-156, 212, 1], [-154, 212, 1], [-152, 212, 1], [-150, 212, 1], [-148, 212, 1], [-146, 212, 1], [-144, 212, 1], [-142, 212, 1], [-140, 212, 1], [-138, 212, 1], [-136, 212, 1], [-134, 212, 1], [-132, 212, 1], [-130, 212, 1], [-128, 212, 1], [-126, 212, 1], [-124, 212, 1], [-122, 212, 1], [-120, 212, 1], [-118, 212, 1], [-116, 212, 1], [-114, 212, 1], [-112, 212, 1], [-110, 212, 1], [-108, 212, 1], [-106, 212, 1], [-104, 212, 1], [-102, 212, 1], [-100, 212, 1], [-98, 212, 1], [-96, 212, 1], [-94, 212, 1], [-92, 212, 1], [-90, 212, 1], [-88, 212, 1], [-86, 212, 1], [-84, 212, 1], [-82, 212, 1], [-80, 212, 1], [-78, 212, 1], [-76, 212, 1], [-74, 212, 1], [-72, 212, 1], [-70, 212, 1], [-68, 212, 1], [-66, 212, 1], [-64, 212, 1], [-62, 212, 1], [-60, 212, 1], [-58, 212, 1], [-56, 212, 1], [-54, 212, 1], [-52, 212, 1], [-50, 212, 1], [-48, 212, 1], [-48, 210, 1], [-48, 208, 1], [-48, 206, 1], [-48, 204, 1], [-48, 202, 1], [-48, 200, 1], [-48, 198, 1], [-48, 196, 1], [-48, 194, 1], [-48, 192, 1], [-48, 190, 1], [-48, 188, 1], [-48, 186, 1], [-48, 184, 1], [-48, 182, 1], [-48, 180, 1], [-48, 178, 1], [-48, 176, 1], [-48, 174, 1], [-48, 172, 1], [-48, 170, 1], [-48, 168, 1], [-48, 166, 1], [-48, 164, 1], [-48, 162, 1], [-48, 160, 1], [-46, 160, 1], [-44, 160, 1], [-42, 160, 1], [-40, 160, 1], [-38, 160, 1], [-36, 160, 1], [-34, 160, 1], [-32, 160, 1], [-30, 160, 1], [-28, 160, 1], [-26, 160, 1], [-24, 160, 1], [-22, 160, 1], [-20, 160, 1], [-18, 160, 1], [-16, 160, 1], [-14, 160, 1], [-14, 158, 1], [-12, 158, 1], [-10, 158, 1], [-10, 156, 1], [-8, 156, 1], [-6, 156, 1], [-4, 156, 1], [-2, 156, 1], [-2, 154, 1], [0, 154, 1], [0, 152, 1], [2, 152, 1], [2, 150, 1], [4, 150, 1], [4, 148, 1], [6, 148, 1], [6, 146, 1], [8, 146, 1], [8, 144, 1], [10, 144, 1], [10, 142, 1], [10, 140, 1], [10, 138, 1], [10, 136, 1], [12, 136, 1], [12, 134, 1], [14, 134, 1], [16, 134, 1], [18, 134, 1], [20, 134, 1], [22, 134, 1], [24, 134, 1], [26, 134, 1], [28, 134, 1], [30, 134, 1], [32, 134, 1], [34, 134, 1], [36, 134, 1], [38, 134, 1], [40, 134, 1], [42, 134, 1], [44, 134, 1], [46, 134, 1], [48, 134, 1], [50, 134, 1], [52, 134, 1], [54, 134, 1], [56, 134, 1], [58, 134, 1], [60, 134, 1], [62, 134, 1], [64, 134, 1], [66, 134, 1], [68, 134, 1], [70, 134, 1], [72, 134, 1], [74, 134, 1], [76, 134, 1], [78, 134, 1], [78, 132, 1], [78, 130, 1], [78, 128, 1], [78, 126, 1], [78, 124, 1], [78, 122, 1], [78, 120, 1], [78, 118, 1], [78, 116, 1], [78, 114, 1], [78, 112, 1], [78, 110, 1], [78, 108, 1], [78, 106, 1], [78, 104, 1], [78, 102, 1], [78, 100, 1], [78, 98, 1], [78, 96, 1], [78, 94, 1], [78, 92, 1], [78, 90, 1], [78, 88, 1], [78, 86, 1], [78, 84, 1], [78, 82, 1], [78, 80, 1], [78, 78, 1], [78, 76, 1], [78, 74, 1], [78, 72, 1], [78, 70, 1], [78, 68, 1], [78, 66, 1], [78, 64, 1], [78, 62, 1], [78, 60, 1], [78, 58, 1], [78, 56, 1], [78, 54, 1], [78, 52, 1], [78, 50, 1], [78, 48, 1], [78, 46, 1], [78, 44, 1], [78, 42, 1], [78, 40, 1], [78, 38, 1], [78, 36, 1], [78, 34, 1], [78, 32, 1], [78, 30, 1], [78, 28, 1], [78, 26, 1], [78, 24, 1], [78, 22, 1], [78, 20, 1], [78, 18, 1], [78, 16, 1], [78, 14, 1], [78, 12, 1], [78, 10, 1], [78, 8, 1], [78, 6, 1], [78, 4, 1], [78, 2, 1], [78, 0, 1], [78, -2, 1], [78, -4, 1], [78, -6, 1], [78, -8, 1], [78, -10, 1], [78, -12, 1], [78, -14, 1], [78, -16, 1], [78, -18, 1], [78, -20, 1], [78, -22, 1], [78, -24, 1], [78, -26, 1], [78, -28, 1], [78, -30, 1], [78, -32, 1], [78, -34, 1], [78, -36, 1], [78, -38, 1], [78, -40, 1], [78, -42, 1], [78, -44, 1], [78, -46, 1], [78, -48, 1], [78, -50, 1], [78, -52, 1], [78, -54, 1], [78, -56, 1], [78, -58, 1], [78, -60, 1], [78, -62, 1], [78, -64, 1], [78, -66, 1], [78, -68, 1], [78, -70, 1], [78, -72, 1], [78, -74, 1], [78, -76, 1], [78, -78, 1], [78, -80, 1], [78, -82, 1], [78, -84, 1], [78, -86, 1], [78, -88, 1], [78, -90, 1], [78, -92, 1], [78, -94, 1], [78, -96, 1], [78, -98, 1], [78, -100, 1], [78, -102, 1], [78, -104, 1], [78, -106, 1], [78, -108, 1], [78, -110, 1], [78, -112, 1], [78, -114, 1], [78, -116, 1], [78, -118, 1], [78, -120, 1], [78, -122, 1], [78, -124, 1], [78, -126, 1], [78, -128, 1], [78, -130, 1], [78, -132, 1], [78, -134, 1], [78, -136, 1], [78, -138, 1], [78, -140, 1], [78, -142, 1], [78, -144, 1], [78, -146, 1], [78, -148, 1], [78, -150, 1], [78, -152, 1], [78, -154, 1], [78, -156, 1], [78, -158, 1], [78, -160, 1], [78, -162, 1], [78, -164, 1], [78, -166, 1], [78, -168, 1], [78, -170, 1], [78, -172, 1], [78, -174, 1], [78, -176, 1], [78, -178, 1], [78, -180, 1], [78, -182, 1], [78, -184, 1], [78, -186, 1], [78, -188, 1], [78, -190, 1], [78, -192, 1], [78, -194, 1], [78, -196, 1], [78, -198, 1], [78, -200, 1], [78, -202, 1], [78, -204, 1], [78, -206, 1], [78, -208, 1], [78, -210, 1], [78, -212, 1], [78, -214, 1], [78, -216, 1], [78, -218, 1], [78, -220, 1], [78, -222, 1], [78, -224, 1], [78, -226, 1], [78, -228, 1], [78, -230, 1], [78, -232, 1], [78, -234, 1], [78, -236, 1], [78, -238, 1], [78, -240, 1], [78, -242, 1], [78, -244, 1], [78, -246, 1], [78, -248, 1], [78, -250, 1], [78, -252, 1], [78, -254, 1], [78, -256, 1], [80, -256, 1], [82, -256, 1], [84, -256, 1], [86, -256, 1], [88, -256, 1], [90, -256, 1], [92, -256, 1], [94, -256, 1], [96, -256, 1], [98, -256, 1], [100, -256, 1], [102, -256, 1], [104, -256, 1], [106, -256, 1], [108, -256, 1], [110, -256, 1], [112, -256, 1], [114, -256, 1], [116, -256, 1], [118, -256, 1], [120, -256, 1], [122, -256, 1], [124, -256, 1], [126, -256, 1], [128, -256, 1], [130, -256, 1], [132, -256, 1], [134, -256, 1], [136, -256, 1], [138, -256, 1], [140, -256, 1], [142, -256, 1], [144, -256, 1], [146, -256, 1], [148, -256, 1], [150, -256, 1], [152, -256, 1], [154, -256, 1], [156, -256, 1], [158, -256, 1], [160, -256, 1], [162, -256, 1], [164, -256, 1], [166, -256, 1], [168, -256, 1], [170, -256, 1], [172, -256, 1], [174, -256, 1], [176, -256, 1], [178, -256, 1], [180, -256, 1], [182, -256, 1], [184, -256, 1], [186, -256, 1], [188, -256, 1], [190, -256, 1], [192, -256, 1], [194, -256, 1], [196, -256, 1], [198, -256, 1], [200, -256, 1], [202, -256, 1], [204, -256, 1], [206, -256, 1], [208, -256, 1], [210, -256, 1], [212, -256, 1], [214, -256, 1], [216, -256, 1], [218, -256, 1], [220, -256, 1], [222, -256, 1], [222, -258, 1], [224, -258, 1], [226, -258, 1], [226, -260, 1], [228, -260, 1], [230, -260, 1], [232, -260, 1], [234, -260, 1], [236, -260, 1], [238, -260, 1], [240, -260, 1], [242, -260, 1], [244, -260, 1], [246, -260, 1], [248, -260, 1], [250, -260, 1], [252, -260, 1], [254, -260, 1], [256, -260, 1], [258, -260, 1], [260, -260, 1], [262, -260, 1], [264, -260, 1], [266, -260, 1], [268, -260, 1], [270, -260, 1], [272, -260, 1], [274, -260, 1], [276, -260, 1], [278, -260, 1], [280, -260, 1], [282, -260, 1], [284, -260, 1], [286, -260, 1], [288, -260, 1], [290, -260, 1], [292, -260, 1], [294, -260, 1], [296, -260, 1], [298, -260, 1], [300, -260, 1], [302, -260, 1], [304, -260, 1], [306, -260, 1], [308, -260, 1], [310, -260, 1], [312, -260, 1], [314, -260, 1], [316, -260, 1], [318, -260, 1], [320, -260, 1], [322, -260, 1], [324, -260, 1], [326, -260, 1], [328, -260, 1], [330, -260, 1], [332, -260, 1], [334, -260, 1], [336, -260, 1], [338, -260, 1], [340, -260, 1], [342, -260, 1], [344, -260, 1], [346, -260, 1], [348, -260, 1], [350, -260, 1], [352, -260, 1], [354, -260, 1], [356, -260, 1], [358, -260, 1], [360, -260, 1], [362, -260, 1], [364, -260, 1], [366, -260, 1], [368, -260, 1], [370, -260, 1], [372, -260, 1], [374, -260, 1], [376, -260, 1], [378, -260, 1], [380, -260, 1], [382, -260, 1], [384, -260, 1], [386, -260, 1], [388, -260, 1], [390, -260, 1], [392, -260, 1], [394, -260, 1], [396, -260, 1], [398, -260, 1], [400, -260, 1], [402, -260, 1], [404, -260, 1], [404, -262, 1], [406, -262, 1], [406, -264, 1], [406, -266, 1], [406, -268, 1], [408, -268, 1], [410, -268, 1], [412, -268, 1], [414, -268, 1], [416, -268, 1], [418, -268, 1], [420, -268, 1], [422, -268, 1], [424, -268, 1], [426, -268, 1], [428, -268, 1], [430, -268, 1], [432, -268, 1], [434, -268, 1], [436, -268, 1], [436, -270, 1], [438, -270, 1], [438, -272, 1], [440, -272, 1], [442, -272, 1], [444, -272, 1], [446, -272, 1], [448, -272, 1], [450, -272, 1], [452, -272, 1], [454, -272, 1], [456, -272, 1], [458, -272, 1], [460, -272, 1], [462, -272, 1], [464, -272, 1], [466, -272, 1], [468, -272, 1], [470, -272, 1], [472, -272, 1], [474, -272, 1], [476, -272, 1], [478, -272, 1], [480, -272, 1], [482, -272, 1], [484, -272, 1], [486, -272, 1], [488, -272, 1], [490, -272, 1], [492, -272, 1], [494, -272, 1], [496, -272, 1], [498, -272, 1], [500, -272, 1], [502, -272, 1], [504, -272, 1], [504, -274, 1], [504, -276, 1], [504, -278, 1], [504, -280, 1], [504, -282, 1], [504, -284, 1], [504, -286, 1], [504, -288, 1], [504, -290, 1], [504, -292, 1], [506, -292, 1], [508, -292, 1], [510, -292, 1], [512, -292, 1], [514, -292, 1], [516, -292, 1], [518, -292, 1], [520, -292, 1], [522, -292, 1], [524, -292, 1], [526, -292, 1], [528, -292, 1], [530, -292, 1], [532, -292, 1], [534, -292, 1], [536, -292, 1], [538, -292, 1], [540, -292, 1], [542, -292, 1], [544, -292, 1], [546, -292, 1], [548, -292, 1], [550, -292, 1], [552, -292, 1], [554, -292, 1], [556, -292, 1], [558, -292, 1], [560, -292, 1], [562, -292, 1], [564, -292, 1], [566, -292, 1], [568, -292, 1], [570, -292, 1], [572, -292, 1], [574, -292, 1], [576, -292, 1], [578, -292, 1], [580, -292, 1], [582, -292, 1], [584, -292, 1], [586, -292, 1], [588, -292, 1], [590, -292, 1], [592, -292, 1], [594, -292, 1], [596, -292, 1], [598, -292, 1], [600, -292, 1], [602, -292, 1], [604, -292, 1], [606, -292, 1], [608, -292, 1], [610, -292, 1], [612, -292, 1], [614, -292, 1], [616, -292, 1], [618, -292, 1], [620, -292, 1], [622, -292, 1], [624, -292, 1], [626, -292, 1], [628, -292, 1], [630, -292, 1], [632, -292, 1], [634, -292, 1], [636, -292, 1], [638, -292, 1], [640, -292, 1], [642, -292, 1], [644, -292, 1], [646, -292, 1], [648, -292, 1], [650, -292, 1], [652, -292, 1], [654, -292, 1], [656, -292, 1], [658, -292, 1], [660, -292, 1], [662, -292, 1], [664, -292, 1], [666, -292, 1], [668, -292, 1], [670, -292, 1], [672, -292, 1], [674, -292, 1], [676, -292, 1], [678, -292, 1], [680, -292, 1], [682, -292, 1], [684, -292, 1], [686, -292, 1], [688, -292, 1]]

const multiplier = 2; // Multiply size of rendered model

var n = 0; // Index of current camera position on path

var lookahead = 15; // How far the camera looks ahead
var headPosition = 20; // How high the camera position is

var mid_x = 652;
var mid_y = 380;

var floorHeight = 50; // Distance between each floor
var textHeight = 40; // Distance from text to respective floor

function addText(text, x, y, group, floor, mid_x, mid_y) {
    /* Function to add room names at certain locations */
    
    var loader = new THREE.FontLoader();
    loader.load('https://threejs.org/examples/fonts/optimer_regular.typeface.json', function(font) {

        var textGeo = new THREE.TextGeometry(text, {
            font: font,
            size: 20,
            height: 1,
        });
        var textMaterial = new THREE.MeshPhongMaterial({
            color: 0x000000,
            visible: true
        });
        var mesh = new THREE.Mesh(textGeo, textMaterial);
        mesh.position.set((x - mid_x) * multiplier, (mid_y - y) * multiplier, floorHeight+floor*textHeight);
        mesh.name = "text1";
        mesh.layers.set(1);
        group.add(mesh);
        
        mesh = new THREE.Mesh(textGeo, textMaterial);
        mesh.position.set((x - mid_x) * multiplier, (mid_y - y) * multiplier, floorHeight+floor*textHeight);
        mesh.name = "text2";
        mesh.layers.set(2);
        group.add(mesh);
    });
};

function addLines(points, group, floor) {
    /* Function add walls at certain locations */
    
    let x1, y1, x2, y2, w;
    x1 = points[0];
    y1 = points[1];
    x2 = points[2];
    y2 = points[3];
    w = points[4] + 1;
    const shape = new THREE.Shape();
    shape.moveTo((x1 - mid_x) * multiplier, (mid_y - y1) * multiplier);
    shape.lineTo((x2 - mid_x) * multiplier, (mid_y - y2) * multiplier);
    shape.lineTo((x2 - mid_x + w) * multiplier, (mid_y - y2) * multiplier);
    shape.lineTo((x1 - mid_x + w) * multiplier, (mid_y - y1) * multiplier);
    shape.lineTo((x1 - mid_x) * multiplier, (mid_y - y1) * multiplier);

    const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);
    const material = new THREE.MeshPhongMaterial({
        color: 0xffffff
    });
    const mesh = new THREE.Mesh(geometry, material);
    mesh.castShadow = true;
    mesh.receiveShadow = true;
    mesh.position.set(0, 0, floor*floorHeight);
    group.add(mesh);
};

function changeFloor() {
    if (floor_btn.value == "All Floors") {
        for (let i = 0; i < groups.length; i++) {
            groups[i].visible = true;
        }
    }
    else{
        for (let i = 0; i < groups.length; i++) {
            groups[i].visible = false;
        }
        visibility = floor_btn.value;
        groups[floor_btn.value].visible = true;
    }
};

function resize() {
    camera.aspect = window.innerWidth/window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight)

    insetwidth = window.innerWidth / 3;
    insetheight = window.innerHeight / 3;
    camera_first.aspect = insetwidth/insetheight;
    camera_first.updateProjectionMatrix();
}

function toggle_navigation() {
    if (travel) {
        travel = false
    } else {
        travel = true
    }
}

function animate() {
    requestAnimationFrame(animate);
    controls.update();
    scene.traverse (function (object) {
        if (object instanceof THREE.Mesh) {
            if (object.name == "text1") {
                object.quaternion.copy( camera.quaternion );
            }
            if (object.name == "text2") {
                object.quaternion.copy( camera_first.quaternion );
            }
        }
    });
    renderer.setViewport(0, 0, window.innerWidth, window.innerHeight)
    renderer.render(scene, camera);
    renderer.clearDepth();
    renderer.setScissorTest(true);
    renderer.setScissor(
        window.innerWidth - insetwidth - 16,
        window.innerHeight - insetheight - 16,
        insetwidth,
        insetheight,
    );
    renderer.setViewport(
        window.innerWidth - insetwidth - 16,
        window.innerHeight - insetheight - 16,
        insetwidth,
        insetheight,
    );
    renderer.render(scene, camera_first);
    renderer.setScissorTest(false);
    
    // Move first person view camera
    
    if (travel) {
        if (n < path.length) {
            floor_btn.value = path[n][2]-1;
            changeFloor();
            
            camera_first.position.set(path[n][0], path[n][1], headPosition+Math.sin(n/6)+(path[n][2]-1)*floorHeight);
            camera_first.lookAt(path[n + lookahead][0], path[n + lookahead][1], headPosition+Math.sin(n/6)+(path[n][2]-1)*floorHeight);
            
            pathPoints[n + lookahead].material.color.setHex(0xff0000);
        }

        if (n>1){
            if (camera_first.rotation.x>1){
                camera_first.rotation.x = Math.PI / 2;
                camera_first.rotation.z = 0;
            }
            else{
                camera_first.rotation.x = -Math.PI / 2;
                camera_first.rotation.z = Math.PI;
            }
        }
        
        n++;
    }
};

function render_model(model) {
    
    $('#loadingText').html("Rendering model...");
    
    //Get JSON model attributes
    const num_floors = model["num_floors"];
    
    // Setting initial values
    
    visibility = 0;
    size = 20;
    travel = false;
    groups = new Array();
    model_json = model;
    
    // Create Three.js renderer
    
    renderer = new THREE.WebGLRenderer();
    renderer.setPixelRatio(window.devicePixelRatio); //get the correct pixel detail on portable devices
    renderer.domElement.style.position = "absolute";
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0xefebd9, 1); // Default background color
    document.body.appendChild(renderer.domElement);
    
    // Create Three.js scene
    
    scene = new THREE.Scene();
    const axesHelper = new THREE.AxesHelper(400);
    scene.add(axesHelper);
    
    // Bird eye view camera
    
    camera = new THREE.PerspectiveCamera(
        90, //FOV
        window.innerWidth / window.innerHeight, //aspect
        1, //near clipping plane
        25000 //far clipping plane
    );
    camera.layers.enable(1);
    camera.position.set(0, 0, 750);
    camera.lookAt(0, 0, 0);
    
    // First person view camera
    
    camera_first = new THREE.PerspectiveCamera(
        90, //FOV
        window.innerWidth / window.innerHeight, //aspect
        1, //near clipping plane
        2500 //far clipping plane
    );
    camera_first.layers.enable(2);
    camera_first.position.set(path[0][0], path[0][1], path[0][2]);
    camera_first.rotation.x = Math.PI / 2;
    camera_first.rotation.z = 0;
    
    const camera_first_helper = new THREE.CameraHelper(camera_first); // Show where first person view camera is
    scene.add(camera_first_helper);
    
    // Create GUI
    
    floor_btn = document.createElement("select");
    floor_btn.add = "Floor 1";
    floor_btn.add = "Floor 2";
    floor_btn.setAttribute("id", "currentFloor");
    floor_btn.setAttribute("name", "Floor");
    document.body.appendChild(floor_btn);
    floor_btn.addEventListener("change", changeFloor);
    floor_btn.style.backgroundColor = "white";
    floor_btn.style.position = "absolute";
    
    room1 = document.createElement("input");
    room1.style.position = "absolute";
    room1.style.top = "50px";
    room1.placeholder = "Start...";
    document.body.appendChild(room1);
    room2 = document.createElement("input");
    room2.style.position = "absolute";
    room2.style.top = "150px";
    room2.placeholder = "End...";
    document.body.appendChild(room2);

    findPathButton = document.createElement('button');
    findPathButton.style.position = "absolute";
    findPathButton.style.top = "220px";
    findPathButton.innerHTML = "Find path";
    document.body.appendChild(findPathButton);
    findPathButton.addEventListener("click", findPath);    
    
    var newOption = document.createElement("option");
    newOption.setAttribute("value", "All Floors");
    node = document.createTextNode("All Floors");
    newOption.appendChild(node);
    document.getElementById("currentFloor").appendChild(newOption);

    // Allow camera to be maneuvered
    
    controls = new THREE.TrackballControls(camera, renderer.domElement);
    // controls.rotateSpeed = 0; // Prevent camera rotation 
    
    const color = 0xFFFFFF;
    const intensity = 1.5;
    const light = new THREE.DirectionalLight(color, intensity);
    light.position.set(400, 400, 800);
    light.target.position.set(0, 0, 0);
    light.castShadow = true;
    scene.add(light);
    scene.add(light.target);
    const light_helper = new THREE.DirectionalLightHelper(light, 200);
    scene.add(light_helper);
   
    for (let i = 0; i < num_floors; i++) {
        let list_of_text = model[(i + 1).toString()]["rooms"];
        let list_of_points = model[(i + 1).toString()]["points"];
        group = new THREE.Group();
        var newOption = document.createElement("option");
        newOption.setAttribute("value", i);
        node = document.createTextNode("Floor " + String(i + 1));
        newOption.appendChild(node);
        document.getElementById("currentFloor").appendChild(newOption);
        for (let j = 0; j < list_of_points.length; j++) {
            addLines(list_of_points[j], group, i);
        }
        for (let j = 0; j < list_of_text.length; j++){
            addText(list_of_text[j][0], list_of_text[j][1], list_of_text[j][2], group, i, mid_x, mid_y);
        }
        scene.add(group);
        groups.push(group);
        mid_x = 424;
        mid_y = 351;
    }

    pathPoints = [];
    
    for(let i = 0; i < path.length; i++) {
        var dotGeometry = new THREE.BufferGeometry();
        dotGeometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array([path[i][0], path[i][1], path[i][2] - 20]), 3));
        var dotMaterial = new THREE.PointsMaterial({ size: 1, color: 0x0000ff });
        var dot = new THREE.Points(dotGeometry, dotMaterial);
        pathPoints.push(dot);
        scene.add(dot);
    }
   
    resize();
    animate();  
    renderer.domElement.addEventListener("click", toggle_navigation);
    window.addEventListener("resize", resize);
    $('#loadingScreen').remove();
}